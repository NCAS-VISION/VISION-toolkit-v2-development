Raw (before argparse processing) input config. comprising custom config. overriding defaults dict is:
{'cfp-cscale': 'plasma',
 'cfp-input-general-config': {'legend': True,
                              'linewidth': 0.4,
                              'markersize': 5,
                              'title': 'Observational field input (path, to be '
                                       'used for co-location, with its '
                                       'corresponding data, to be ignored)'},
 'cfp-input-levs-config': {'max': 55, 'min': -5, 'step': 5},
 'cfp-input-track-only-config': {'colorbar': False,
                                 'legend': True,
                                 'linewidth': 0,
                                 'markersize': 0.5,
                                 'title': 'Flight track from observational '
                                          'field to co-locate model field '
                                          'onto'},
 'cfp-mapset-config': {'latmax': 54,
                       'latmin': 50,
                       'lonmax': 2,
                       'lonmin': -2,
                       'resolution': '10m'},
 'cfp-output-general-config': {'legend': True,
                               'linewidth': 0.4,
                               'markersize': 5,
                               'title': 'Co-located result: model co-located '
                                        'onto observational path'},
 'cfp-output-levs-config': {'max': 1e-07, 'min': 5e-08, 'step': 2.5e-09},
 'chosen-model-fields': -2,
 'chosen-obs-fields': 0,
 'data-dir-loc': 'data',
 'history-message': 'Processed using the NCAS VISION Toolkit to colocate from '
                    'model data to the observational data spatio-temporal '
                    'location.',
 'model-data-dir': 'main-workwith-test-ISO-simulator/Model_Input',
 'obs-data-dir': 'compliant-data/core_faam_20170703_c016_STANCO_CF.nc',
 'output-file-name': 'cf_vision_result_field.nc',
 'outputs-dir': 'cf-script-outputs',
 'plot-of-input-obs-track-only': 2,
 'plotname-start': 'vision_toolkit',
 'regrid-method': 'linear',
 'regrid-z-coord': 'air_pressure',
 'show-plot-of-input-obs': True,
 'verbose': True}

Parsed configuration arguments are:
Namespace(data_dir_loc='data', obs_data_dir='compliant-data/core_faam_20170703_c016_STANCO_CF.nc', model_data_dir='main-workwith-test-ISO-simulator/Model_Input', chosen_obs_fields=0, chosen_model_fields=-2, outputs_dir='cf-script-outputs', output_file_name='cf_vision_result_field.nc', history_message='Processed using the NCAS VISION Toolkit to colocate from model data to the observational data spatio-temporal location.', regrid_method='linear', regrid_z_coord='air_pressure', plotname_start='vision_toolkit', show_plot_of_input_obs=True, plot_of_input_obs_track_only=2, cfp_cscale='plasma', cfp_mapset_config={'lonmin': -2, 'lonmax': 2, 'latmin': 50, 'latmax': 54, 'resolution': '10m'}, cfp_input_levs_config={'min': -5, 'max': 55, 'step': 5}, cfp_input_track_only_config={'legend': True, 'colorbar': False, 'markersize': 0.5, 'linewidth': 0, 'title': 'Flight track from observational field to co-locate model field onto'}, cfp_output_levs_config={'min': 5e-08, 'max': 1e-07, 'step': 2.5e-09}, cfp_output_general_config={'legend': True, 'markersize': 5, 'linewidth': 0.4, 'title': 'Co-located result: model co-located onto observational path'}, verbose=True, cfp_input_general_config={'legend': True, 'markersize': 5, 'linewidth': 0.4, 'title': 'Observational field input (path, to be used for co-location, with its corresponding data, to be ignored)'})

Using Python and CF environment of:
Platform: Linux-6.5.13-7-MANJARO-x86_64-with-glibc2.39 
HDF5 library: 1.14.3 
netcdf library: 4.9.2 
udunits2 library: /home/slb93/miniconda3/envs/cf-env-312/lib/libudunits2.so.0 
esmpy/ESMF: 8.6.1 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/esmpy/__init__.py
Python: 3.12.2 /home/slb93/miniconda3/envs/cf-env-312/bin/python
dask: 2024.3.1 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/dask/__init__.py
netCDF4: 1.7.1 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/netCDF4/__init__.py
psutil: 5.9.5 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/psutil/__init__.py
packaging: 23.2 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/packaging/__init__.py
numpy: 1.26.4 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/numpy/__init__.py
scipy: 1.11.3 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/scipy/__init__.py
matplotlib: 3.8.0 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/matplotlib/__init__.py
cftime: 1.6.4 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/cftime/__init__.py
cfunits: 3.3.7 /home/slb93/miniconda3/envs/cf-env-312/lib/python3.12/site-packages/cfunits/__init__.py
cfplot: 3.3.0 /home/slb93/git-repos/cf-plot/cfplot/__init__.py
cfdm: 1.11.1.0 /home/slb93/git-repos/cfdm/cfdm/__init__.py
cf: 3.16.2 /home/slb93/git-repos/cf-python/cf/__init__.py


_____ Time taken (in s) for 'read_obs_input_data' to run: 0.0235 _____


_____ Time taken (in s) for 'read_model_input_data' to run: 2.6291 _____

All input data successfully read in.

Input data locations are:
Observational data: 'data/compliant-data/core_faam_20170703_c016_STANCO_CF.nc'
Model data: 'data/main-workwith-test-ISO-simulator/Model_Input'

Observational FieldList is:
 [<CF Field: mole_fraction_of_ozone_in_air(ncdim%obs(11160)) ppb>]
For example, first observational field is:

----------------------------------------------------
Field: mole_fraction_of_ozone_in_air (ncvar%O3_TECO)
----------------------------------------------------
Conventions = 'CF-1.11'
NCO = 'netCDF Operators version 5.0.6 (Homepage = http://nco.sf.net, Code =
       http://github.com/nco/nco)'
_FillValue = -9999.0
featureType = 'trajectory'
frequency = 1
history = 'Fri Feb  9 18:53:35 2024: ncatted -O -a
           featureType,global,c,c,trajectory -a coordinates,O3_TECO,c,c,time
           altitude air_pressure latitude longitude -a
           cf_role,campaign,c,c,trajectory_id -a units,campaign,d,, -a
           missing_value,campaign,d,, -a _FillValue,campaign,d,, -a
           frequency,campaign,d,, -o core_faam_20170703_c016_STANCO
           core_faam_20170703_c016_STANCO.nc'
long_name = 'Mole fraction of Ozone in air from the TECO 49 instrument'
missing_value = -9999.0
number = 574
source = 'CIS1.7.4'
standard_name = 'mole_fraction_of_ozone_in_air'
units = 'ppb'

Data(ncdim%obs(11160)) = [49.95000076293945, ..., 0.8899999856948853] ppb

Domain Axis: cf_role=trajectory_id(1)
Domain Axis: ncdim%obs(11160)

Auxiliary coordinate: time
    _FillValue = -1.0
    calendar = 'standard'
    long_name = 'time of measurement'
    missing_value = -1.0
    standard_name = 'time'
    units = 'days since 1900-01-01 00:00:00'
    Data(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard

Auxiliary coordinate: altitude
    _FillValue = -9999.0
    frequency = 32
    long_name = 'Altitude from POS AV 510 GPS-aided Inertial Navigation unit'
    missing_value = -9999.0
    number = 612
    standard_name = 'altitude'
    units = 'm'
    Data(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m

Auxiliary coordinate: air_pressure
    _FillValue = -9999.0
    frequency = 32
    long_name = 'Static pressure from the aircraft RVSM (air data) system'
    missing_value = -9999.0
    number = 576
    standard_name = 'air_pressure'
    units = 'hPa'
    Data(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa

Auxiliary coordinate: latitude
    _FillValue = -9999.0
    frequency = 32
    long_name = 'Latitude from POS AV 510 GPS-aided Inertial Navigation unit'
    missing_value = -9999.0
    number = 610
    standard_name = 'latitude'
    units = 'degree_north'
    Data(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north

Auxiliary coordinate: longitude
    _FillValue = -9999.0
    frequency = 32
    long_name = 'Longitude from POS AV 510 GPS-aided Inertial Navigation unit'
    missing_value = -9999.0
    number = 611
    standard_name = 'longitude'
    units = 'degree_east'
    Data(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east

Auxiliary coordinate: cf_role=trajectory_id
    cf_role = 'trajectory_id'
    long_name = 'campaign'
    Data(cf_role=trajectory_id(1)) = [STANCO]

Model FieldList is:
 [<CF Field: id%UM_m01s34i001_vn1105(time(216), atmosphere_hybrid_height_coordinate(27), latitude(144), longitude(192)) 1>,
 <CF Field: id%UM_m01s34i010_vn1105(time(216), atmosphere_hybrid_height_coordinate(27), latitude(144), longitude(192)) 1>,
 <CF Field: id%UM_m01s51i001_vn1105(time(216), air_pressure(19), latitude(144), longitude(192)) 1>,
 <CF Field: id%UM_m01s51i010_vn1105(time(216), air_pressure(19), latitude(144), longitude(192)) 1>,
 <CF Field: id%UM_m01s51i999_vn1105(time(216), air_pressure(19), latitude(144), longitude(192))>]
For example, first model field is:

-----------------------------------------------------------
Field: id%UM_m01s34i001_vn1105 (ncvar%UM_m01s34i001_vn1105)
-----------------------------------------------------------
Conventions = 'CF-1.11'
_FillValue = -1073741824.0
history = 'Converted from UM/PP by cf-python v3.16.2'
lbproc = '0'
lbtim = '11'
long_name = 'O3 MASS MIXING RATIO AFTER TIMESTEP'
runid = 'aaaaa'
source = 'UM vn1105'
stash_code = '34001'
submodel = '1'
um_stash_source = 'm01s34i001'
um_version = '11.5'
units = '1'

Data(time(216), atmosphere_hybrid_height_coordinate(27), latitude(144), longitude(192)) = [[[[2.5158492178434244e-08, ..., 8.979477428283644e-08]]]] 1

Cell Method: time(216): point

Domain Axis: atmosphere_hybrid_height_coordinate(27)
Domain Axis: latitude(144)
Domain Axis: longitude(192)
Domain Axis: time(216)

Dimension coordinate: time
    axis = 'T'
    calendar = 'gregorian'
    standard_name = 'time'
    units = 'days since 2017-1-1'
    Data(time(216)) = [2017-07-03 01:00:00, ..., 2017-08-01 00:00:00] gregorian

Dimension coordinate: atmosphere_hybrid_height_coordinate
    axis = 'Z'
    positive = 'up'
    standard_name = 'atmosphere_hybrid_height_coordinate'
    units = '1'
    Data(atmosphere_hybrid_height_coordinate(27)) = [0.003696857951581478, ..., 0.9648799300193787] 1
    Bounds:units = '1'
    Bounds:Data(atmosphere_hybrid_height_coordinate(27), 2) = [[0.0, ..., 1.0]] 1

Dimension coordinate: latitude
    axis = 'Y'
    standard_name = 'latitude'
    units = 'degrees_north'
    Data(latitude(144)) = [-89.375, ..., 89.375] degrees_north
    Bounds:units = 'degrees_north'
    Bounds:Data(latitude(144), 2) = [[-90.0, ..., 90.0]] degrees_north

Dimension coordinate: longitude
    axis = 'X'
    standard_name = 'longitude'
    units = 'degrees_east'
    Data(longitude(192)) = [0.9375, ..., 359.0625] degrees_east
    Bounds:units = 'degrees_east'
    Bounds:Data(longitude(192), 2) = [[0.0, ..., 360.0]] degrees_east

Auxiliary coordinate: model_level_number
    standard_name = 'model_level_number'
    units = '1'
    Data(atmosphere_hybrid_height_coordinate(27)) = [1, ..., 27] 1

Domain ancillary: id%UM_atmosphere_hybrid_height_coordinate_a
    long_name = 'height based hybrid coeffient a'
    units = 'm'
    Data(atmosphere_hybrid_height_coordinate(27)) = [19.999998092651367, ..., 5219.99951171875] m
    Bounds:units = 'm'
    Bounds:Data(atmosphere_hybrid_height_coordinate(27), 2) = [[0.0, ..., 5409.9990234375]] m

Domain ancillary: id%UM_atmosphere_hybrid_height_coordinate_b
    long_name = 'height based hybrid coeffient b'
    units = '1'
    Data(atmosphere_hybrid_height_coordinate(27)) = [0.9977412819862366, ..., 0.4971233606338501] 1
    Bounds:units = '1'
    Bounds:Data(atmosphere_hybrid_height_coordinate(27), 2) = [[1.0, ..., 0.48210078477859497]] 1

Coordinate reference: standard_name:atmosphere_hybrid_height_coordinate
    Coordinate conversion:standard_name = atmosphere_hybrid_height_coordinate
    Coordinate conversion:a = Domain Ancillary: id%UM_atmosphere_hybrid_height_coordinate_a
    Coordinate conversion:b = Domain Ancillary: id%UM_atmosphere_hybrid_height_coordinate_b
    Coordinate conversion:orog = 
    Dimension Coordinate: atmosphere_hybrid_height_coordinate


_____ Time taken (in s) for 'get_input_fields_of_interest' to run: 0.0 _____


_____ Time taken (in s) for 'make_preview_plots' to run: 3.1764 _____


_____ Time taken (in s) for 'ensure_cf_compliance' to run: 0.0 _____

Units on obs. time coordinate are: days since 1900-01-01 00:00:00 standard
Units on model time coordinate are: days since 2017-1-1 gregorian
Unit-conformed model time coord. is: time(216) days since 1900-01-01 00:00:00 standard
Units on observational and model time coords. are the same?: True

Calendar on obs. time coordinate is: standard
Calendar on model time coordinate is: standard
Calendars on observational and model time coords. are the same?: True


_____ Time taken (in s) for 'ensure_unit_calendar_consistency' to run: 0.0036 _____

Set to create 4D bounding box onto model field, based on obs. field tight boundaries of (4D: X, Y, Z, T):
X: (<CF Data(1): [-1.297370195388794] degree_east>, <CF Data(1): [1.9447091817855835] degree_east>)
Y: (<CF Data(1): [50.81974792480469] degree_north>, <CF Data(1): [52.96879196166992] degree_north>)
Z: (<CF Data(1): [751.5882568359375] hPa>, <CF Data(1): [1017.21826171875] hPa>)
T: (<CF Data(1): [2017-07-03 11:15:07] standard>, <CF Data(1): [2017-07-03 14:21:06] standard>)

Halo reduced to keep subspace within axis limits
Indices of model field bounding box subspace are:([10, 11, 12, 13, 14], [0, 1, 2, 3, 4, 5], [112, 113, 114], slice(-2, 2, 1))
Halo reduced to keep subspace within axis limits
4D bounding box calculated. Model data with bounding box applied is: Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), air_pressure(6), latitude(3), longitude(4)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
                : air_pressure(6) = [1000.0, ..., 745.0] hPa
                : latitude(3) = [50.625, 51.875, 53.125] degrees_north
                : longitude(4) = [-2.8125, ..., 2.8125] degrees_east

_____ Time taken (in s) for 'subspace_to_spatiotemporal_bounding_box' to run: 0.7436 _____

Starting spatial interpolation (regridding) step...

Spatial interpolation (regridding) complete.

XYZ-colocated data is:
 Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), ncdim%obs(11160)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east

_____ Time taken (in s) for 'spatial_interpolation' to run: 0.7439 _____

Starting time interpolation step.

Number of model time data points: 5
Number of observational time sample data points: 11160

Observational (aux) coord. time key is: auxiliarycoordinate0
Model (dim) time key is: dimensioncoordinate0

*** Begin iteration over pairwise 'segments'. ***

*** Segment 0 ***

Datetime endpoints for this segment are: 2017-07-03 11:00:00, 2017-07-03 12:00:00.

Querying with query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 11, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False))) on field:
Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), ncdim%obs(11160)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east


Using subspace arguments for i=0 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 11, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [0]}

Using subspace arguments for i=1 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 11, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [1]}

Weights total (should be 1.0, as a validation check) is: 1.0


*** Segment 1 ***

Datetime endpoints for this segment are: 2017-07-03 12:00:00, 2017-07-03 13:00:00.

Querying with query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False))) on field:
Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), ncdim%obs(11160)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east


Using subspace arguments for i=0 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [1]}

Using subspace arguments for i=1 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 12, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [2]}

Weights total (should be 1.0, as a validation check) is: 1.0


*** Segment 2 ***

Datetime endpoints for this segment are: 2017-07-03 13:00:00, 2017-07-03 14:00:00.

Querying with query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False))) on field:
Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), ncdim%obs(11160)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east


Using subspace arguments for i=0 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [2]}

Using subspace arguments for i=1 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 13, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [3]}

Weights total (should be 1.0, as a validation check) is: 1.0


*** Segment 3 ***

Datetime endpoints for this segment are: 2017-07-03 14:00:00, 2017-07-03 15:00:00.

Querying with query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 15, 0, 0, 0, has_year_zero=False))) on field:
Field: id%UM_m01s51i010_vn1105 (ncvar%UM_m01s51i010_vn1105)
-----------------------------------------------------------
Data            : id%UM_m01s51i010_vn1105(time(5), ncdim%obs(11160)) 1
Cell methods    : time(5): point
Dimension coords: time(5) = [2017-07-03 11:00:00, ..., 2017-07-03 15:00:00] standard
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east


Using subspace arguments for i=0 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 15, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [3]}

Using subspace arguments for i=1 of: {'auxiliarycoordinate0': <CF Query: (wi [cftime.DatetimeGregorian(2017, 7, 3, 14, 0, 0, 0, has_year_zero=False), cftime.DatetimeGregorian(2017, 7, 3, 15, 0, 0, 0, has_year_zero=False)))>, 'dimensioncoordinate0': [4]}

Weights total (should be 1.0, as a validation check) is: 1.0

Final per-segment weighted value arrays are:
[<CF Data(2693): [6.779750336892296e-08, ..., 7.413941330134375e-08] 1>,
 <CF Data(3600): [7.27975015137213e-08, ..., 7.769948717839781e-08] 1>,
 <CF Data(3600): [7.635724391534766e-08, ..., 6.86992865990245e-08] 1>,
 <CF Data(1267): [6.765407103750331e-08, ..., --] 1>]

Final concatenated weighted value array is: [6.779750336892296e-08 6.779451548668776e-08 6.779514097285623e-08 ... --
 -- --], with length: 11160

Masking: 8942 non-masked values vs. 2218 masked.

New history message reads: Converted from UM/PP by cf-python v3.16.2 ~ Processed using the NCAS VISION Toolkit to colocate from model data to the observational data spatio-temporal location.


Final result field is:

Field: long_name=CO MASS MIX RATIO ON PRESS LEVS (ncvar%O3_TECO)
----------------------------------------------------------------
Data            : long_name=CO MASS MIX RATIO ON PRESS LEVS(ncdim%obs(11160)) 1
Auxiliary coords: time(ncdim%obs(11160)) = [2017-07-03 11:15:07, ..., 2017-07-03 14:21:06] standard
                : altitude(ncdim%obs(11160)) = [2577.927001953125, ..., 151.16905212402344] m
                : air_pressure(ncdim%obs(11160)) = [751.6758422851562, ..., 1006.53076171875] hPa
                : latitude(ncdim%obs(11160)) = [52.56147766113281, ..., 52.0729866027832] degree_north
                : longitude(ncdim%obs(11160)) = [0.3171832859516144, ..., -0.6249311566352844] degree_east
                : cf_role=trajectory_id(cf_role=trajectory_id(1)) = [STANCO]

The final result field has data statistics of:

{'maximum': 8.12758410456799e-08,
 'mean': 6.931143485433616e-08,
 'median': 7.132299399372318e-08,
 'mid_range': 6.887960093031828e-08,
 'minimum': 5.648336081495664e-08,
 'range': 2.479248023072326e-08,
 'root_mean_square': 6.972418729718075e-08,
 'sample_size': 8942,
 'standard_deviation': 7.575440098466652e-09}

Time interpolation complete.

_____ Time taken (in s) for 'time_interpolation' to run: 3.046 _____


_____ Time taken (in s) for 'create_cra_outputs' to run: 0.0 _____


_____ Time taken (in s) for 'write_output_data' to run: 0.4617 _____


_____ Time taken (in s) for 'make_outputs_plots' to run: 0.8344 _____


_____ Time taken (in s) for 'main' to run: 11.7251 _____

